// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringGrid.Infrastructure.Data;

#nullable disable

namespace MonitoringGrid.Infrastructure.Migrations
{
    [DbContext(typeof(MonitoringContext))]
    [Migration("20250605192714_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonitoringGrid.Core.Entities.AlertLog", b =>
                {
                    b.Property<long>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AlertId"));

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DeviationPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("HistoricalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte>("SentVia")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TriggerTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("AlertId");

                    b.HasIndex("IsResolved")
                        .HasDatabaseName("IX_AlertLogs_IsResolved");

                    b.HasIndex("KpiId")
                        .HasDatabaseName("IX_AlertLogs_KpiId");

                    b.HasIndex("TriggerTime")
                        .HasDatabaseName("IX_AlertLogs_TriggerTime");

                    b.HasIndex("KpiId", "TriggerTime")
                        .HasDatabaseName("IX_AlertLogs_KpiId_TriggerTime");

                    b.ToTable("AlertLogs", "monitoring", t =>
                        {
                            t.HasCheckConstraint("CK_AlertLogs_SentVia", "SentVia IN (1, 2, 3)");
                        });
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Config", b =>
                {
                    b.Property<string>("ConfigKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ConfigKey");

                    b.HasIndex("ModifiedDate")
                        .HasDatabaseName("IX_Config_ModifiedDate");

                    b.ToTable("Config", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contacts_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Contacts_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Contacts_Name");

                    b.ToTable("Contacts", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.HistoricalData", b =>
                {
                    b.Property<long>("HistoricalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HistoricalId"));

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<string>("MetricKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HistoricalId");

                    b.HasIndex("KpiId")
                        .HasDatabaseName("IX_HistoricalData_KpiId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_HistoricalData_Timestamp");

                    b.HasIndex("KpiId", "Timestamp")
                        .HasDatabaseName("IX_HistoricalData_KpiId_Timestamp");

                    b.HasIndex("KpiId", "MetricKey", "Period")
                        .HasDatabaseName("IX_HistoricalData_KpiId_MetricKey_Period");

                    b.ToTable("HistoricalData", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KPI", b =>
                {
                    b.Property<int>("KpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KpiId"));

                    b.Property<int>("CooldownMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DescriptionTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Deviation")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MinimumThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectTemplate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("KpiId");

                    b.HasIndex("Indicator")
                        .IsUnique()
                        .HasDatabaseName("IX_KPIs_Indicator");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_KPIs_IsActive");

                    b.HasIndex("LastRun")
                        .HasDatabaseName("IX_KPIs_LastRun");

                    b.HasIndex("Owner")
                        .HasDatabaseName("IX_KPIs_Owner");

                    b.ToTable("KPIs", "monitoring", t =>
                        {
                            t.HasCheckConstraint("CK_KPIs_Priority", "Priority IN (1, 2)");
                        });
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiContact", b =>
                {
                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("KpiId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("KpiContacts", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.SystemStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("AlertsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastHeartbeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProcessedKpis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.HasIndex("LastHeartbeat")
                        .HasDatabaseName("IX_SystemStatus_LastHeartbeat");

                    b.HasIndex("ServiceName")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemStatus_ServiceName");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SystemStatus_Status");

                    b.ToTable("SystemStatus", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.AlertLog", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("AlertLogs")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.HistoricalData", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("HistoricalData")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiContact", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Contact", "Contact")
                        .WithMany("KpiContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("KpiContacts")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Contact", b =>
                {
                    b.Navigation("KpiContacts");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KPI", b =>
                {
                    b.Navigation("AlertLogs");

                    b.Navigation("HistoricalData");

                    b.Navigation("KpiContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
