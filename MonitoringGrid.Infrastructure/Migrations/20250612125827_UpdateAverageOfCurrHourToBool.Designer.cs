// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitoringGrid.Infrastructure.Data;

#nullable disable

namespace MonitoringGrid.Infrastructure.Migrations
{
    [DbContext(typeof(MonitoringContext))]
    [Migration("20250612125827_UpdateAverageOfCurrHourToBool")]
    partial class UpdateAverageOfCurrHourToBool
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonitoringGrid.Core.Entities.AlertLog", b =>
                {
                    b.Property<long>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AlertId"));

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DeviationPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("HistoricalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("IndicatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte>("SentVia")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TriggerTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("AlertId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("IsResolved")
                        .HasDatabaseName("IX_AlertLogs_IsResolved");

                    b.HasIndex("KpiId")
                        .HasDatabaseName("IX_AlertLogs_KpiId");

                    b.HasIndex("TriggerTime")
                        .HasDatabaseName("IX_AlertLogs_TriggerTime");

                    b.HasIndex("KpiId", "TriggerTime")
                        .HasDatabaseName("IX_AlertLogs_KpiId_TriggerTime");

                    b.ToTable("AlertLogs", "monitoring", t =>
                        {
                            t.HasCheckConstraint("CK_AlertLogs_SentVia", "SentVia IN (1, 2, 3)");
                        });
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BlacklistedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("BlacklistedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BlacklistedAt")
                        .HasDatabaseName("IX_BlacklistedTokens_BlacklistedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_BlacklistedTokens_ExpiresAt");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("IX_BlacklistedTokens_TokenHash");

                    b.HasIndex("ExpiresAt", "BlacklistedAt")
                        .HasDatabaseName("IX_BlacklistedTokens_Expires_Blacklisted");

                    b.ToTable("BlacklistedTokens", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Config", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Key");

                    b.HasIndex("ModifiedDate")
                        .HasDatabaseName("IX_Config_ModifiedDate");

                    b.ToTable("Config", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Contacts_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Contacts_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Contacts_Name");

                    b.ToTable("Contacts", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.HistoricalData", b =>
                {
                    b.Property<long>("HistoricalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HistoricalId"));

                    b.Property<bool>("AlertSent")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DeviationPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExecutionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutionMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("int");

                    b.Property<decimal?>("HistoricalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("IndicatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<string>("MetricKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("RawResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ShouldAlert")
                        .HasColumnType("bit");

                    b.Property<string>("SqlCommand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HistoricalId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("KpiId")
                        .HasDatabaseName("IX_HistoricalData_KpiId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_HistoricalData_Timestamp");

                    b.HasIndex("KpiId", "Timestamp")
                        .HasDatabaseName("IX_HistoricalData_KpiId_Timestamp");

                    b.HasIndex("KpiId", "MetricKey", "Period")
                        .HasDatabaseName("IX_HistoricalData_KpiId_MetricKey_Period");

                    b.ToTable("HistoricalData", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Indicator", b =>
                {
                    b.Property<long>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IndicatorId"));

                    b.Property<decimal?>("AverageHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AverageLastDays")
                        .HasColumnType("int");

                    b.Property<bool>("AverageOfCurrHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("CollectorId")
                        .HasColumnType("int");

                    b.Property<string>("CollectorItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ExecutionContext")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExecutionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndicatorCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndicatorDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IndicatorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCurrentlyRunning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LastMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(60);

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastRunResult")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OwnerContactId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("medium");

                    b.Property<string>("ScheduleConfiguration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThresholdComparison")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ThresholdField")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThresholdType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ThresholdValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("IndicatorId");

                    b.HasIndex("CollectorId")
                        .HasDatabaseName("IX_Indicators_CollectorId");

                    b.HasIndex("IndicatorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Indicators_IndicatorCode");

                    b.HasIndex("IndicatorName")
                        .HasDatabaseName("IX_Indicators_IndicatorName");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Indicators_IsActive");

                    b.HasIndex("LastRun")
                        .HasDatabaseName("IX_Indicators_LastRun");

                    b.HasIndex("OwnerContactId")
                        .HasDatabaseName("IX_Indicators_OwnerContactId");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Indicators_Priority");

                    b.HasIndex("CollectorId", "CollectorItemName")
                        .HasDatabaseName("IX_Indicators_Collector_Item");

                    b.ToTable("Indicators", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.IndicatorContact", b =>
                {
                    b.Property<int>("IndicatorContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndicatorContactID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicatorContactId"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("IndicatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("IndicatorID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("IndicatorContactId");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("IX_IndicatorContacts_ContactId");

                    b.HasIndex("IndicatorId")
                        .HasDatabaseName("IX_IndicatorContacts_IndicatorId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_IndicatorContacts_IsActive");

                    b.HasIndex("IndicatorId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("UQ_IndicatorContacts_IndicatorId_ContactId");

                    b.ToTable("IndicatorContacts", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KPI", b =>
                {
                    b.Property<int>("KpiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KpiId"));

                    b.Property<string>("ComparisonOperator")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CooldownMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DescriptionTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Deviation")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ExecutionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Indicator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCurrentlyRunning")
                        .HasColumnType("bit");

                    b.Property<string>("KpiType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("success_rate");

                    b.Property<int>("LastMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1440);

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MinimumThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<string>("ScheduleConfiguration")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("SpName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectTemplate")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ThresholdValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("KpiId");

                    b.HasIndex("Indicator")
                        .IsUnique()
                        .HasDatabaseName("IX_KPIs_Indicator");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_KPIs_IsActive");

                    b.HasIndex("KpiType")
                        .HasDatabaseName("IX_KPIs_KpiType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("KpiType"), new[] { "IsActive" });

                    b.HasIndex("LastRun")
                        .HasDatabaseName("IX_KPIs_LastRun");

                    b.HasIndex("Owner")
                        .HasDatabaseName("IX_KPIs_Owner");

                    b.ToTable("KPIs", "monitoring", t =>
                        {
                            t.HasCheckConstraint("CK_KPIs_ComparisonOperator", "ComparisonOperator IS NULL OR ComparisonOperator IN ('gt', 'gte', 'lt', 'lte', 'eq')");

                            t.HasCheckConstraint("CK_KPIs_KpiType", "KpiType IN ('success_rate', 'transaction_volume', 'threshold', 'trend_analysis')");

                            t.HasCheckConstraint("CK_KPIs_Priority", "Priority IN (1, 2)");
                        });
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiContact", b =>
                {
                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("KpiId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("KpiContacts", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiType", b =>
                {
                    b.Property<string>("KpiTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DefaultStoredProcedure")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RequiredFields")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("KpiTypeId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_KpiTypes_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_KpiTypes_Name");

                    b.ToTable("KpiTypes", "monitoring");

                    b.HasData(
                        new
                        {
                            KpiTypeId = "success_rate",
                            CreatedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2347),
                            DefaultStoredProcedure = "monitoring.usp_MonitorTransactions",
                            Description = "Monitors success percentages and compares them against historical averages. Ideal for tracking transaction success rates, API response rates, login success rates, and other percentage-based metrics.",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2347),
                            Name = "Success Rate Monitoring",
                            RequiredFields = "[\"deviation\", \"lastMinutes\"]"
                        },
                        new
                        {
                            KpiTypeId = "transaction_volume",
                            CreatedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2351),
                            DefaultStoredProcedure = "monitoring.usp_MonitorTransactionVolume",
                            Description = "Tracks transaction counts and compares them to historical patterns. Perfect for detecting unusual spikes or drops in activity, monitoring daily transactions, API calls, user registrations, and other count-based metrics.",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2351),
                            Name = "Transaction Volume Monitoring",
                            RequiredFields = "[\"deviation\", \"minimumThreshold\", \"lastMinutes\"]"
                        },
                        new
                        {
                            KpiTypeId = "threshold",
                            CreatedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2354),
                            DefaultStoredProcedure = "monitoring.usp_MonitorThreshold",
                            Description = "Simple threshold-based monitoring that triggers alerts when values cross specified limits. Useful for monitoring system resources, queue lengths, error counts, response times, and other absolute value metrics.",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2354),
                            Name = "Threshold Monitoring",
                            RequiredFields = "[\"thresholdValue\", \"comparisonOperator\"]"
                        },
                        new
                        {
                            KpiTypeId = "trend_analysis",
                            CreatedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2356),
                            DefaultStoredProcedure = "monitoring.usp_MonitorTrends",
                            Description = "Analyzes trends over time to detect gradual changes or patterns. Excellent for capacity planning, performance degradation detection, user behavior analysis, and early warning systems for emerging issues.",
                            IsActive = true,
                            ModifiedDate = new DateTime(2025, 6, 12, 12, 58, 26, 432, DateTimeKind.Utc).AddTicks(2357),
                            Name = "Trend Analysis",
                            RequiredFields = "[\"deviation\", \"lastMinutes\"]"
                        });
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Permission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Permissions_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.HasIndex("Resource", "Action")
                        .HasDatabaseName("IX_Permissions_Resource_Action");

                    b.ToTable("Permissions", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.HasIndex("IsActive", "ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_Active_Expires");

                    b.ToTable("RefreshTokens", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Roles_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermissions_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.ToTable("RolePermissions", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.ScheduledJob", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntervalMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobGroup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("KPI_JOBS");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("NextFireTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PreviousFireTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TriggerGroup")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("KPI_TRIGGERS");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("JobId");

                    b.HasIndex("KpiId")
                        .HasDatabaseName("IX_ScheduledJobs_KpiId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("KpiId"), new[] { "IsActive" });

                    b.HasIndex("NextFireTime")
                        .HasDatabaseName("IX_ScheduledJobs_NextFireTime")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("JobName", "JobGroup")
                        .IsUnique()
                        .HasDatabaseName("IX_ScheduledJobs_JobName_JobGroup");

                    b.HasIndex("TriggerName", "TriggerGroup")
                        .IsUnique()
                        .HasDatabaseName("IX_ScheduledJobs_TriggerName_TriggerGroup");

                    b.ToTable("ScheduledJobs", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.SystemStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int>("AlertsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastHeartbeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProcessedKpis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.HasIndex("LastHeartbeat")
                        .HasDatabaseName("IX_SystemStatus_LastHeartbeat");

                    b.HasIndex("ServiceName")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemStatus_ServiceName");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SystemStatus_Status");

                    b.ToTable("SystemStatus", "monitoring");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserPasswords_UserId");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_UserPasswords_UserId_Active");

                    b.ToTable("UserPasswords", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.ToTable("UserRoles", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Security.SecurityAuditEvent", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Resource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EventId");

                    b.HasIndex("EventType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("EventType", "Timestamp");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("SecurityAuditEvents", (string)null);
                });

            modelBuilder.Entity("MonitoringGrid.Core.Security.SecurityThreat", b =>
                {
                    b.Property<string>("ThreatId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThreatData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreatType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ThreatId");

                    b.HasIndex("DetectedAt");

                    b.HasIndex("IpAddress");

                    b.HasIndex("IsResolved");

                    b.HasIndex("Severity");

                    b.HasIndex("ThreatType");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityThreats", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Security.UserTwoFactorSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EnabledAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("RecoveryCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("EnabledAt");

                    b.HasIndex("IsEnabled");

                    b.ToTable("UserTwoFactorSettings", "auth");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.AlertLog", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Indicator", null)
                        .WithMany("AlertLogs")
                        .HasForeignKey("IndicatorId");

                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("AlertLogs")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.HistoricalData", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Indicator", null)
                        .WithMany("HistoricalData")
                        .HasForeignKey("IndicatorId");

                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("HistoricalData")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Indicator", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Contact", "OwnerContact")
                        .WithMany()
                        .HasForeignKey("OwnerContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerContact");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.IndicatorContact", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Contact", "Contact")
                        .WithMany("IndicatorContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringGrid.Core.Entities.Indicator", "Indicator")
                        .WithMany("IndicatorContacts")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KPI", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.KpiType", null)
                        .WithMany("KPIs")
                        .HasForeignKey("KpiType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiContact", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Contact", "Contact")
                        .WithMany("KpiContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany("KpiContacts")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringGrid.Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.ScheduledJob", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.KPI", "KPI")
                        .WithMany()
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.UserPassword", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.User", "User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.UserRole", b =>
                {
                    b.HasOne("MonitoringGrid.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonitoringGrid.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Contact", b =>
                {
                    b.Navigation("IndicatorContacts");

                    b.Navigation("KpiContacts");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Indicator", b =>
                {
                    b.Navigation("AlertLogs");

                    b.Navigation("HistoricalData");

                    b.Navigation("IndicatorContacts");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KPI", b =>
                {
                    b.Navigation("AlertLogs");

                    b.Navigation("HistoricalData");

                    b.Navigation("KpiContacts");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.KpiType", b =>
                {
                    b.Navigation("KPIs");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MonitoringGrid.Core.Entities.User", b =>
                {
                    b.Navigation("PasswordHistory");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
