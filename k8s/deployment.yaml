apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-grid-api
  namespace: monitoring-grid
  labels:
    app: monitoring-grid-api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: monitoring-grid-api
  template:
    metadata:
      labels:
        app: monitoring-grid-api
        version: v1
    spec:
      serviceAccountName: monitoring-grid-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: ghcr.io/uri-do/monitor:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: DefaultConnection
        - name: ConnectionStrings__PopAIConnection
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: PopAIConnection
        - name: ConnectionStrings__Redis
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: RedisConnection
        - name: SecurityConfiguration__Jwt__SecretKey
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: JwtSecretKey
        - name: SecurityConfiguration__Encryption__EncryptionKey
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: EncryptionKey
        - name: SecurityConfiguration__Encryption__HashingSalt
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: HashingSalt
        - name: MonitoringConfiguration__SmtpUsername
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: SmtpUsername
        - name: MonitoringConfiguration__SmtpPassword
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: SmtpPassword
        - name: SlackConfiguration__BotToken
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: SlackBotToken
        - name: TeamsConfiguration__DefaultWebhookUrl
          valueFrom:
            secretKeyRef:
              name: monitoring-grid-secrets
              key: TeamsWebhookUrl
        volumeMounts:
        - name: config-volume
          mountPath: /app/appsettings.Production.json
          subPath: appsettings.Production.json
        - name: logs-volume
          mountPath: /app/logs
        - name: data-volume
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: monitoring-grid-config
      - name: logs-volume
        persistentVolumeClaim:
          claimName: monitoring-grid-logs-pvc
      - name: data-volume
        persistentVolumeClaim:
          claimName: monitoring-grid-data-pvc
      imagePullSecrets:
      - name: ghcr-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  namespace: monitoring-grid
  labels:
    app: nginx-proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-proxy
  template:
    metadata:
      labels:
        app: nginx-proxy
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sqlserver
  namespace: monitoring-grid
spec:
  serviceName: sqlserver-service
  replicas: 1
  selector:
    matchLabels:
      app: sqlserver
  template:
    metadata:
      labels:
        app: sqlserver
    spec:
      containers:
      - name: sqlserver
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - containerPort: 1433
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sqlserver-secret
              key: SA_PASSWORD
        - name: MSSQL_PID
          value: "Developer"
        volumeMounts:
        - name: sqlserver-data
          mountPath: /var/opt/mssql
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /opt/mssql-tools/bin/sqlcmd
            - -S
            - localhost
            - -U
            - sa
            - -P
            - $(SA_PASSWORD)
            - -Q
            - SELECT 1
          initialDelaySeconds: 60
          periodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: sqlserver-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: monitoring-grid
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
